# Definir la función que queremos integrar
f <- function(x) {
return( exp(-x*x))
}
# Definir los límites de integración
a <- -1 # Límite inferior
b <- 1 # Límite superior
# Número de muestras
n <- 10000
# Generar muestras aleatorias uniformes entre a y b
x <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y <- f(x)
# Calcular la integral aproximada
integral <- (b - a) * mean(y)
# Imprimir el resultado
print(paste("El valor aproximado de la integral es:", integral))
# Definir la función que queremos integrar
f <- function(x) {
return( exp(-x*x))
}
# Definir los límites de integración
a <- -1 # Límite inferior
b <- 1 # Límite superior
# Número de muestras
n <- 10000
# Generar muestras aleatorias  entre a y b
x_uniform <- runif(n, min = a, max = b)
x_normal <- rnorm(n, mean = 0, sd = 1)
# Evaluar la función en las muestras aleatorias generadas
y_uniform <- f(x_uniform)
y_normal <- f(x_normal)
# Calcular la integral aproximada
integral_uniform <- rep(0, n)
integral_normal <- rep(0, n)
for (i in 1:n) {
integral_uniform[i] <- (b - a) * mean(y_uniform[1:i])
integral_normal[i] <- (b - a) * mean(y_normal[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform = integral_uniform,
Integral_Normal = integral_normal
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform, color = "Uniform Distribution")) +
geom_line(aes(y = Integral_Normal, color = "Normal Distribution")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
library(ggplot2)
# Definir la función que queremos integrar
f <- function(x) {
return( exp(-x*x))
}
# Definir los límites de integración
a <- -1 # Límite inferior
b <- 1 # Límite superior
# Número de muestras
n <- 10000
# Generar muestras aleatorias  entre a y b
x_uniform <- runif(n, min = a, max = b)
x_normal <- rnorm(n, mean = 0, sd = 1)
# Evaluar la función en las muestras aleatorias generadas
y_uniform <- f(x_uniform)
y_normal <- f(x_normal)
# Calcular la integral aproximada
integral_uniform <- rep(0, n)
integral_normal <- rep(0, n)
for (i in 1:n) {
integral_uniform[i] <- (b - a) * mean(y_uniform[1:i])
integral_normal[i] <- (b - a) * mean(y_normal[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform = integral_uniform,
Integral_Normal = integral_normal
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform, color = "Uniform Distribution")) +
geom_line(aes(y = Integral_Normal, color = "Normal Distribution")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
# Número de muestras
n <- 100
# Generar muestras aleatorias  entre a y b
x_uniform <- runif(n, min = a, max = b)
x_normal <- rnorm(n, mean = 0, sd = 1)
# Evaluar la función en las muestras aleatorias generadas
y_uniform <- f(x_uniform)
y_normal <- f(x_normal)
# Calcular la integral aproximada
integral_uniform <- rep(0, n)
integral_normal <- rep(0, n)
for (i in 1:n) {
integral_uniform[i] <- (b - a) * mean(y_uniform[1:i])
integral_normal[i] <- (b - a) * mean(y_normal[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform = integral_uniform,
Integral_Normal = integral_normal
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform, color = "Uniform Distribution")) +
geom_line(aes(y = Integral_Normal, color = "Normal Distribution")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
library(ggplot2)
# Definir la función que queremos integrar
f <- function(x) {
return( exp(-x*x))
}
# Definir los límites de integración
a <- -1 # Límite inferior
b <- 1 # Límite superior
# Número de muestras
n <- 100
# Generar muestras aleatorias  entre a y b
x_uniform1 <- runif(n, min = a, max = b)
x_uniform2 <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y_uniform1 <- f(x_uniform1)
y_uniform2 <- f(x_uniform2)
# Calcular la integral aproximada
integral_uniform1 <- rep(0, n)
integral_uniform2 <- rep(0, n)
for (i in 1:n) {
integral_uniform1[i] <- (b - a) * mean(y_uniform1[1:i])
integral_uniform2[i] <- (b - a) * mean(y_uniform2[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform1 = integral_uniform1,
Integral_Uniform2 = integral_uniform2
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
# Número de muestras
n <- 200
# Generar muestras aleatorias  entre a y b
x_uniform1 <- runif(n, min = a, max = b)
x_uniform2 <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y_uniform1 <- f(x_uniform1)
y_uniform2 <- f(x_uniform2)
# Calcular la integral aproximada
integral_uniform1 <- rep(0, n)
integral_uniform2 <- rep(0, n)
for (i in 1:n) {
integral_uniform1[i] <- (b - a) * mean(y_uniform1[1:i])
integral_uniform2[i] <- (b - a) * mean(y_uniform2[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform1 = integral_uniform1,
Integral_Uniform2 = integral_uniform2
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
# Número de muestras
n <- 200
# Generar muestras aleatorias  entre a y b
x_uniform1 <- runif(n, min = a, max = b)
x_uniform2 <- runif(n, min = a, max = b)
x_uniform3 <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y_uniform1 <- f(x_uniform1)
y_uniform2 <- f(x_uniform2)
y_uniform3 <- f(x_uniform3)
# Calcular la integral aproximada
integral_uniform1 <- rep(0, n)
integral_uniform2 <- rep(0, n)
integral_uniform3 <- rep(0, n)
for (i in 1:n) {
integral_uniform1[i] <- (b - a) * mean(y_uniform1[1:i])
integral_uniform2[i] <- (b - a) * mean(y_uniform2[1:i])
integral_uniform3[i] <- (b - a) * mean(y_uniform3[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform1 = integral_uniform1,
Integral_Uniform2 = integral_uniform2,
Integral_Uniform3 = integral_uniform3
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
geom_line(aes(y = integral_uniform3, color = "Uniform Distribution 3"))
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
geom_line(aes(y = integral_uniform3, color = "Uniform Distribution 3")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red", "green")) +
theme_minimal()
# Número de muestras
n <- 500
# Generar muestras aleatorias  entre a y b
x_uniform1 <- runif(n, min = a, max = b)
x_uniform2 <- runif(n, min = a, max = b)
x_uniform3 <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y_uniform1 <- f(x_uniform1)
y_uniform2 <- f(x_uniform2)
y_uniform3 <- f(x_uniform3)
# Calcular la integral aproximada
integral_uniform1 <- rep(0, n)
integral_uniform2 <- rep(0, n)
integral_uniform3 <- rep(0, n)
for (i in 1:n) {
integral_uniform1[i] <- (b - a) * mean(y_uniform1[1:i])
integral_uniform2[i] <- (b - a) * mean(y_uniform2[1:i])
integral_uniform3[i] <- (b - a) * mean(y_uniform3[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform1 = integral_uniform1,
Integral_Uniform2 = integral_uniform2,
Integral_Uniform3 = integral_uniform3
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
geom_line(aes(y = integral_uniform3, color = "Uniform Distribution 3")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red", "green")) +
theme_minimal()
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.01)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.0, 2, by = 0.001)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.001)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.001)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), paste("Max: ", round(theta_hat, 3)), pos = 3, col = "red")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.001)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), paste("Max: ", round(theta_hat, 3)), pos = 3, col = "red")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, likelihood(theta_hat, x), labels = paste("Max: ", round(theta_hat, 3)), pos = 3, col = "red")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, likelihood(theta_hat, x), labels = paste("Max: ", round(theta_hat, 3)), pos = 3, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 3, col = "red")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 0, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 7, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 7, col = "red")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 7, col = "red")
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 5, col = "red")
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
text(theta_hat, max(likelihood_values), labels = paste("θ_hat =", round(theta_hat, 3)), pos = 2, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
adjustment_factor <- 0.1
text(theta_hat, max(likelihood_values) - adjustment_factor, labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
text(theta_hat, 0, labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, 0, labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
text(theta_hat, 0.001, labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
# Datos de la muestra
x <- c(1.2, 0.75, -0.39, -0.01, 0.51)
# Función de verosimilitud
likelihood <- function(theta, x) {
prod(1 / (sqrt(2 * pi) * theta) * exp(-x^2 / (2 * theta^2)))
}
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.001)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, 0.002, labels = paste("θ_hat =", round(theta_hat, 3)), pos = 4, col = "red")
text(theta_hat, 0.002, labels = paste("θ_hat =", round(theta_hat, 2)), pos = 4, col = "black")
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, 0.002, labels = paste("θ_hat =", round(theta_hat, 2)), pos = 4, col = "black")
# Valores de theta para evaluar
theta_values <- seq(0.1, 2, by = 0.01)
# Calcular L(theta) para cada valor de theta
likelihood_values <- sapply(theta_values, function(t) likelihood(t, x))
# Encontrar el estimador de máxima verosimilitud (EMV)
theta_hat <- theta_values[which.max(likelihood_values)]
# Graficar L(theta)
plot(theta_values, likelihood_values, type = "l", xlab = expression(theta), ylab = expression(L(theta)),
main = "Función de Verosimilitud L(θ)")
abline(v = theta_hat, col = "red", lty = 2)
text(theta_hat, 0.002, labels = paste("θ_hat =", round(theta_hat, 2)), pos = 4, col = "black")
# Imprimir el valor de theta que maximiza la verosimilitud
cat("El estimador de máxima verosimilitud (EMV) es:", theta_hat, "\n")
library(ggplot2)
# Definir la función que queremos integrar
f <- function(x) {
return( exp(-x*x))
}
# Definir los límites de integración
a <- -1 # Límite inferior
b <- 1 # Límite superior
# Número de muestras
n <- 500
# Generar muestras aleatorias  entre a y b
x_uniform1 <- runif(n, min = a, max = b)
x_uniform2 <- runif(n, min = a, max = b)
x_uniform3 <- runif(n, min = a, max = b)
# Evaluar la función en las muestras aleatorias generadas
y_uniform1 <- f(x_uniform1)
y_uniform2 <- f(x_uniform2)
y_uniform3 <- f(x_uniform3)
# Calcular la integral aproximada
integral_uniform1 <- rep(0, n)
integral_uniform2 <- rep(0, n)
integral_uniform3 <- rep(0, n)
for (i in 1:n) {
integral_uniform1[i] <- (b - a) * mean(y_uniform1[1:i])
integral_uniform2[i] <- (b - a) * mean(y_uniform2[1:i])
integral_uniform3[i] <- (b - a) * mean(y_uniform3[1:i])
}
# Crear un gráfico para comparar la convergencia
df <- data.frame(
Iteration = 1:n,
Integral_Uniform1 = integral_uniform1,
Integral_Uniform2 = integral_uniform2,
Integral_Uniform3 = integral_uniform3
)
ggplot(df, aes(x = Iteration)) +
geom_line(aes(y = Integral_Uniform1, color = "Uniform Distribution 1")) +
geom_line(aes(y = Integral_Uniform2, color = "Uniform Distribution 2")) +
geom_line(aes(y = integral_uniform3, color = "Uniform Distribution 3")) +
labs(title = "Convergencia de Monte Carlo con Diferentes Distribuciones",
x = "Iteración",
y = "Valor Aproximado de la Integral") +
scale_color_manual(values = c("blue", "red", "green")) +
theme_minimal()
